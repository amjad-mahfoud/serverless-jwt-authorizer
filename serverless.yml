org: tmaximini

custom:
  secrets: ${file(secrets.json)}
  tableName: "test-users-table"

service: serverless-jwt-authorizer
provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    AWS_ID: ${self:custom.secrets.AWS_ID}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
      Resource: "arn:aws:dynamodb:eu-central-1:${self:custom.secrets.AWS_ID}:table/${self:custom.tableName}"
functions:
  verify-token:
    handler: functions/authorize.verifyToken

  me:
    handler: functions/user.me
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer:
            name: verify-token # execute this before !
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
  login:
    handler: functions/user.signIn
    events:
      - http:
          path: login
          method: post
          cors: true
  register:
    handler: functions/user.registerUser
    events:
      - http:
          path: register
          method: post
          cors: true
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
